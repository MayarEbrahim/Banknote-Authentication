# -*- coding: utf-8 -*-
"""lab Task 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yuGbHtn6zXyotoVHcajQzhD24huA-WnW
"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.metrics import plot_roc_curve,roc_curve, roc_auc_score
from sklearn.svm import SVC 
from sklearn import metrics
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import math


banknoteInfo=pd.read_csv('/content/data_banknote_authentication.csv')
banknoteInfo.columns =['variancee', 'skewness', 'curtosis ', 'entropy','class']
banknoteInfo = banknoteInfo.drop_duplicates()
banknoteInfo = banknoteInfo.dropna()

banknoteInfo

#divide data into input "x" and output"y"
y = banknoteInfo['class']
x =banknoteInfo.drop(['class'],axis = 1)

#if y=0 idetify it as -1 otherwise 1
y = np.where(y == 0, -1, 1)
x,y

#divide data set into trainning and testing sets with testing size on 30 percentage
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 0)
#standardizing
standardizingScaler = StandardScaler()
x_train = standardizingScaler.fit_transform(x_train)
x_test = standardizingScaler.transform(x_test)

#batch size suitable to data shape
batch_size=math.floor(banknoteInfo.shape[0]/50)
print('The intial value for batch= ',batch_size)

#Hard margin SVM
SVM_hard_acc = []
SVM_hard_error = []
classifier = SVC(C =1e-30,kernel='rbf', random_state = 0)
sz=batch_size
for i in range(50):
    classifier.fit(x_train[0:sz],y_train[0:sz])
    y_pred = classifier.predict(x_test[0:sz])
    SVM_hard_acc.append(accuracy_score(y_test[0:sz],y_pred[0:sz])*100)
    conMatrix = confusion_matrix(y_test[0:sz],y_pred)
    SVM_hard_error.append(100-SVM_hard_acc[i])
    sz = sz + batch_size

plt.plot(SVM_hard_error)
plt.title('Testing error of hard margin SVM')
plt.xlabel("Epochs")
plt.ylabel("Error%")
plt.show()

plt.plot(SVM_hard_acc)
plt.title('Testing accuracy of hard margin SVM')
plt.xlabel("Epochs")
plt.ylabel("Accuracy%")
plt.show()

conMatrix_show = metrics.ConfusionMatrixDisplay(confusion_matrix = conMatrix, display_labels = [False, True])

conMatrix_show.plot()
plt.title('Confusion matrix of hard margin SVM')
plt.show()

accuracy_percentage= (conMatrix[0,0]+conMatrix[1,1])/sum(sum(conMatrix))*100
print(accuracy_percentage)

hard_false_positive_rate, hard_true_positive_rate, threshold = roc_curve(y_test,y_pred)
plt.plot(hard_false_positive_rate, hard_true_positive_rate)
plt.ylabel('True positive rate')
plt.xlabel('False positive rate')
plt.title('ROC curve of hard margin SVM')
plt.show()

#Soft margin SVM
SVM_soft_acc = []
SVM_soft_error = []
classifier = SVC(C = 1,kernel='rbf', random_state = 0)
sz=batch_size
for i in range(50):
    classifier.fit(x_train[0:sz],y_train[0:sz])
    y_pred = classifier.predict(x_test[0:sz])
  
    SVM_soft_acc.append(accuracy_score(y_test[0:sz],y_pred[0:sz])*100)
    conMatrix = confusion_matrix(y_test[0:sz],y_pred)
    SVM_soft_error.append(100-SVM_soft_acc[i])
    sz = sz + batch_size

plt.plot(SVM_soft_error)
plt.title('Testing error of soft margin SVM')
plt.xlabel("Epochs")
plt.ylabel("Error%")
plt.show()

plt.plot(SVM_soft_acc)
plt.title('Testing accuracy of soft margin SVM')
plt.xlabel("Epochs")
plt.ylabel("Accuracy%")
plt.show()

conMatrix_show = metrics.ConfusionMatrixDisplay(confusion_matrix = conMatrix, display_labels = [False, True])
conMatrix_show.plot()
plt.title('Confusion matrix of soft margin SVM')
plt.show()

accuracy_percentage= (conMatrix[0,0]+conMatrix[1,1])/sum(sum(conMatrix))*100
print(accuracy_percentage)

soft_false_positive_rate, soft_true_positive_rate, threshold = roc_curve(y_test,y_pred)
plt.plot(soft_false_positive_rate, soft_true_positive_rate)
plt.ylabel('True positive rate')
plt.xlabel('False positive rate')
plt.title('ROC curve of soft margin SVM')
plt.show()